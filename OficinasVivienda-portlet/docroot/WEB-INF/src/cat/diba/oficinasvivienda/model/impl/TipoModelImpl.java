/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package cat.diba.oficinasvivienda.model.impl;

import cat.diba.oficinasvivienda.model.Tipo;
import cat.diba.oficinasvivienda.model.TipoModel;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the Tipo service. Represents a row in the &quot;OfiVi_Tipo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link cat.diba.oficinasvivienda.model.TipoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TipoImpl}.
 * </p>
 *
 * @author gonzalezscr
 * @see TipoImpl
 * @see cat.diba.oficinasvivienda.model.Tipo
 * @see cat.diba.oficinasvivienda.model.TipoModel
 * @generated
 */
public class TipoModelImpl extends BaseModelImpl<Tipo> implements TipoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tipo model instance should use the {@link cat.diba.oficinasvivienda.model.Tipo} interface instead.
	 */
	public static final String TABLE_NAME = "OfiVi_Tipo";
	public static final Object[][] TABLE_COLUMNS = {
			{ "idTipo", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "nombre", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table OfiVi_Tipo (idTipo LONG not null primary key,companyId LONG,groupId LONG,nombre STRING null)";
	public static final String TABLE_SQL_DROP = "drop table OfiVi_Tipo";
	public static final String ORDER_BY_JPQL = " ORDER BY tipo.idTipo ASC";
	public static final String ORDER_BY_SQL = " ORDER BY OfiVi_Tipo.idTipo ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.cat.diba.oficinasvivienda.model.Tipo"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.cat.diba.oficinasvivienda.model.Tipo"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.cat.diba.oficinasvivienda.model.Tipo"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long IDTIPO_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.cat.diba.oficinasvivienda.model.Tipo"));

	public TipoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _idTipo;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIdTipo(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _idTipo;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Tipo.class;
	}

	@Override
	public String getModelClassName() {
		return Tipo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("idTipo", getIdTipo());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("nombre", getNombre());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long idTipo = (Long)attributes.get("idTipo");

		if (idTipo != null) {
			setIdTipo(idTipo);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		String nombre = (String)attributes.get("nombre");

		if (nombre != null) {
			setNombre(nombre);
		}
	}

	@Override
	public long getIdTipo() {
		return _idTipo;
	}

	@Override
	public void setIdTipo(long idTipo) {
		_idTipo = idTipo;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public String getNombre() {
		if (_nombre == null) {
			return StringPool.BLANK;
		}
		else {
			return _nombre;
		}
	}

	@Override
	public String getNombre(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getNombre(languageId);
	}

	@Override
	public String getNombre(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getNombre(languageId, useDefault);
	}

	@Override
	public String getNombre(String languageId) {
		return LocalizationUtil.getLocalization(getNombre(), languageId);
	}

	@Override
	public String getNombre(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getNombre(), languageId,
			useDefault);
	}

	@Override
	public String getNombreCurrentLanguageId() {
		return _nombreCurrentLanguageId;
	}

	@JSON
	@Override
	public String getNombreCurrentValue() {
		Locale locale = getLocale(_nombreCurrentLanguageId);

		return getNombre(locale);
	}

	@Override
	public Map<Locale, String> getNombreMap() {
		return LocalizationUtil.getLocalizationMap(getNombre());
	}

	@Override
	public void setNombre(String nombre) {
		_nombre = nombre;
	}

	@Override
	public void setNombre(String nombre, Locale locale) {
		setNombre(nombre, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setNombre(String nombre, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(nombre)) {
			setNombre(LocalizationUtil.updateLocalization(getNombre(),
					"Nombre", nombre, languageId, defaultLanguageId));
		}
		else {
			setNombre(LocalizationUtil.removeLocalization(getNombre(),
					"Nombre", languageId));
		}
	}

	@Override
	public void setNombreCurrentLanguageId(String languageId) {
		_nombreCurrentLanguageId = languageId;
	}

	@Override
	public void setNombreMap(Map<Locale, String> nombreMap) {
		setNombreMap(nombreMap, LocaleUtil.getDefault());
	}

	@Override
	public void setNombreMap(Map<Locale, String> nombreMap, Locale defaultLocale) {
		if (nombreMap == null) {
			return;
		}

		setNombre(LocalizationUtil.updateLocalization(nombreMap, getNombre(),
				"Nombre", LocaleUtil.toLanguageId(defaultLocale)));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Tipo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> nombreMap = getNombreMap();

		for (Map.Entry<Locale, String> entry : nombreMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getNombre();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String nombre = getNombre(defaultLocale);

		if (Validator.isNull(nombre)) {
			setNombre(getNombre(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setNombre(getNombre(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public Tipo toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Tipo)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TipoImpl tipoImpl = new TipoImpl();

		tipoImpl.setIdTipo(getIdTipo());
		tipoImpl.setCompanyId(getCompanyId());
		tipoImpl.setGroupId(getGroupId());
		tipoImpl.setNombre(getNombre());

		tipoImpl.resetOriginalValues();

		return tipoImpl;
	}

	@Override
	public int compareTo(Tipo tipo) {
		long primaryKey = tipo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Tipo)) {
			return false;
		}

		Tipo tipo = (Tipo)obj;

		long primaryKey = tipo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TipoModelImpl tipoModelImpl = this;

		tipoModelImpl._originalCompanyId = tipoModelImpl._companyId;

		tipoModelImpl._setOriginalCompanyId = false;

		tipoModelImpl._originalGroupId = tipoModelImpl._groupId;

		tipoModelImpl._setOriginalGroupId = false;

		tipoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Tipo> toCacheModel() {
		TipoCacheModel tipoCacheModel = new TipoCacheModel();

		tipoCacheModel.idTipo = getIdTipo();

		tipoCacheModel.companyId = getCompanyId();

		tipoCacheModel.groupId = getGroupId();

		tipoCacheModel.nombre = getNombre();

		String nombre = tipoCacheModel.nombre;

		if ((nombre != null) && (nombre.length() == 0)) {
			tipoCacheModel.nombre = null;
		}

		return tipoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{idTipo=");
		sb.append(getIdTipo());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", nombre=");
		sb.append(getNombre());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("cat.diba.oficinasvivienda.model.Tipo");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>idTipo</column-name><column-value><![CDATA[");
		sb.append(getIdTipo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nombre</column-name><column-value><![CDATA[");
		sb.append(getNombre());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Tipo.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Tipo.class };
	private long _idTipo;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private String _nombre;
	private String _nombreCurrentLanguageId;
	private long _columnBitmask;
	private Tipo _escapedModel;
}