/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package cat.diba.oficinasvivienda.model.impl;

import cat.diba.oficinasvivienda.model.Municipio;
import cat.diba.oficinasvivienda.model.MunicipioModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Municipio service. Represents a row in the &quot;OfiVi_Municipio&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link cat.diba.oficinasvivienda.model.MunicipioModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MunicipioImpl}.
 * </p>
 *
 * @author gonzalezscr
 * @see MunicipioImpl
 * @see cat.diba.oficinasvivienda.model.Municipio
 * @see cat.diba.oficinasvivienda.model.MunicipioModel
 * @generated
 */
public class MunicipioModelImpl extends BaseModelImpl<Municipio>
	implements MunicipioModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a municipio model instance should use the {@link cat.diba.oficinasvivienda.model.Municipio} interface instead.
	 */
	public static final String TABLE_NAME = "OfiVi_Municipio";
	public static final Object[][] TABLE_COLUMNS = {
			{ "codigoIne", Types.VARCHAR },
			{ "nombre", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table OfiVi_Municipio (codigoIne VARCHAR(75) not null primary key,nombre VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table OfiVi_Municipio";
	public static final String ORDER_BY_JPQL = " ORDER BY municipio.codigoIne ASC";
	public static final String ORDER_BY_SQL = " ORDER BY OfiVi_Municipio.codigoIne ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.cat.diba.oficinasvivienda.model.Municipio"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.cat.diba.oficinasvivienda.model.Municipio"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.cat.diba.oficinasvivienda.model.Municipio"));

	public MunicipioModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _codigoIne;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setCodigoIne(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _codigoIne;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Municipio.class;
	}

	@Override
	public String getModelClassName() {
		return Municipio.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("codigoIne", getCodigoIne());
		attributes.put("nombre", getNombre());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String codigoIne = (String)attributes.get("codigoIne");

		if (codigoIne != null) {
			setCodigoIne(codigoIne);
		}

		String nombre = (String)attributes.get("nombre");

		if (nombre != null) {
			setNombre(nombre);
		}
	}

	@Override
	public String getCodigoIne() {
		if (_codigoIne == null) {
			return StringPool.BLANK;
		}
		else {
			return _codigoIne;
		}
	}

	@Override
	public void setCodigoIne(String codigoIne) {
		_codigoIne = codigoIne;
	}

	@Override
	public String getNombre() {
		if (_nombre == null) {
			return StringPool.BLANK;
		}
		else {
			return _nombre;
		}
	}

	@Override
	public void setNombre(String nombre) {
		_nombre = nombre;
	}

	@Override
	public Municipio toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Municipio)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MunicipioImpl municipioImpl = new MunicipioImpl();

		municipioImpl.setCodigoIne(getCodigoIne());
		municipioImpl.setNombre(getNombre());

		municipioImpl.resetOriginalValues();

		return municipioImpl;
	}

	@Override
	public int compareTo(Municipio municipio) {
		String primaryKey = municipio.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Municipio)) {
			return false;
		}

		Municipio municipio = (Municipio)obj;

		String primaryKey = municipio.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Municipio> toCacheModel() {
		MunicipioCacheModel municipioCacheModel = new MunicipioCacheModel();

		municipioCacheModel.codigoIne = getCodigoIne();

		String codigoIne = municipioCacheModel.codigoIne;

		if ((codigoIne != null) && (codigoIne.length() == 0)) {
			municipioCacheModel.codigoIne = null;
		}

		municipioCacheModel.nombre = getNombre();

		String nombre = municipioCacheModel.nombre;

		if ((nombre != null) && (nombre.length() == 0)) {
			municipioCacheModel.nombre = null;
		}

		return municipioCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{codigoIne=");
		sb.append(getCodigoIne());
		sb.append(", nombre=");
		sb.append(getNombre());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("cat.diba.oficinasvivienda.model.Municipio");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>codigoIne</column-name><column-value><![CDATA[");
		sb.append(getCodigoIne());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nombre</column-name><column-value><![CDATA[");
		sb.append(getNombre());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Municipio.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Municipio.class
		};
	private String _codigoIne;
	private String _nombre;
	private Municipio _escapedModel;
}