/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package cat.diba.oficinasvivienda.service.base;

import cat.diba.oficinasvivienda.model.Servicio;
import cat.diba.oficinasvivienda.service.ServicioLocalService;
import cat.diba.oficinasvivienda.service.persistence.MunicipioPersistence;
import cat.diba.oficinasvivienda.service.persistence.OficinaServicioMunicipioPersistence;
import cat.diba.oficinasvivienda.service.persistence.OficinaTipoPersistence;
import cat.diba.oficinasvivienda.service.persistence.ServicioPersistence;
import cat.diba.oficinasvivienda.service.persistence.TipoPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the servicio local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link cat.diba.oficinasvivienda.service.impl.ServicioLocalServiceImpl}.
 * </p>
 *
 * @author gonzalezscr
 * @see cat.diba.oficinasvivienda.service.impl.ServicioLocalServiceImpl
 * @see cat.diba.oficinasvivienda.service.ServicioLocalServiceUtil
 * @generated
 */
public abstract class ServicioLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements ServicioLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link cat.diba.oficinasvivienda.service.ServicioLocalServiceUtil} to access the servicio local service.
	 */

	/**
	 * Adds the servicio to the database. Also notifies the appropriate model listeners.
	 *
	 * @param servicio the servicio
	 * @return the servicio that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Servicio addServicio(Servicio servicio) throws SystemException {
		servicio.setNew(true);

		return servicioPersistence.update(servicio);
	}

	/**
	 * Creates a new servicio with the primary key. Does not add the servicio to the database.
	 *
	 * @param idServicio the primary key for the new servicio
	 * @return the new servicio
	 */
	@Override
	public Servicio createServicio(long idServicio) {
		return servicioPersistence.create(idServicio);
	}

	/**
	 * Deletes the servicio with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param idServicio the primary key of the servicio
	 * @return the servicio that was removed
	 * @throws PortalException if a servicio with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Servicio deleteServicio(long idServicio)
		throws PortalException, SystemException {
		return servicioPersistence.remove(idServicio);
	}

	/**
	 * Deletes the servicio from the database. Also notifies the appropriate model listeners.
	 *
	 * @param servicio the servicio
	 * @return the servicio that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Servicio deleteServicio(Servicio servicio) throws SystemException {
		return servicioPersistence.remove(servicio);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Servicio.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return servicioPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link cat.diba.oficinasvivienda.model.impl.ServicioModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return servicioPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link cat.diba.oficinasvivienda.model.impl.ServicioModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return servicioPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return servicioPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return servicioPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public Servicio fetchServicio(long idServicio) throws SystemException {
		return servicioPersistence.fetchByPrimaryKey(idServicio);
	}

	/**
	 * Returns the servicio with the primary key.
	 *
	 * @param idServicio the primary key of the servicio
	 * @return the servicio
	 * @throws PortalException if a servicio with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Servicio getServicio(long idServicio)
		throws PortalException, SystemException {
		return servicioPersistence.findByPrimaryKey(idServicio);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return servicioPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the servicios.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link cat.diba.oficinasvivienda.model.impl.ServicioModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of servicios
	 * @param end the upper bound of the range of servicios (not inclusive)
	 * @return the range of servicios
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Servicio> getServicios(int start, int end)
		throws SystemException {
		return servicioPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of servicios.
	 *
	 * @return the number of servicios
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getServiciosCount() throws SystemException {
		return servicioPersistence.countAll();
	}

	/**
	 * Updates the servicio in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param servicio the servicio
	 * @return the servicio that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Servicio updateServicio(Servicio servicio) throws SystemException {
		return servicioPersistence.update(servicio);
	}

	/**
	 * Returns the municipio local service.
	 *
	 * @return the municipio local service
	 */
	public cat.diba.oficinasvivienda.service.MunicipioLocalService getMunicipioLocalService() {
		return municipioLocalService;
	}

	/**
	 * Sets the municipio local service.
	 *
	 * @param municipioLocalService the municipio local service
	 */
	public void setMunicipioLocalService(
		cat.diba.oficinasvivienda.service.MunicipioLocalService municipioLocalService) {
		this.municipioLocalService = municipioLocalService;
	}

	/**
	 * Returns the municipio persistence.
	 *
	 * @return the municipio persistence
	 */
	public MunicipioPersistence getMunicipioPersistence() {
		return municipioPersistence;
	}

	/**
	 * Sets the municipio persistence.
	 *
	 * @param municipioPersistence the municipio persistence
	 */
	public void setMunicipioPersistence(
		MunicipioPersistence municipioPersistence) {
		this.municipioPersistence = municipioPersistence;
	}

	/**
	 * Returns the oficina servicio municipio local service.
	 *
	 * @return the oficina servicio municipio local service
	 */
	public cat.diba.oficinasvivienda.service.OficinaServicioMunicipioLocalService getOficinaServicioMunicipioLocalService() {
		return oficinaServicioMunicipioLocalService;
	}

	/**
	 * Sets the oficina servicio municipio local service.
	 *
	 * @param oficinaServicioMunicipioLocalService the oficina servicio municipio local service
	 */
	public void setOficinaServicioMunicipioLocalService(
		cat.diba.oficinasvivienda.service.OficinaServicioMunicipioLocalService oficinaServicioMunicipioLocalService) {
		this.oficinaServicioMunicipioLocalService = oficinaServicioMunicipioLocalService;
	}

	/**
	 * Returns the oficina servicio municipio persistence.
	 *
	 * @return the oficina servicio municipio persistence
	 */
	public OficinaServicioMunicipioPersistence getOficinaServicioMunicipioPersistence() {
		return oficinaServicioMunicipioPersistence;
	}

	/**
	 * Sets the oficina servicio municipio persistence.
	 *
	 * @param oficinaServicioMunicipioPersistence the oficina servicio municipio persistence
	 */
	public void setOficinaServicioMunicipioPersistence(
		OficinaServicioMunicipioPersistence oficinaServicioMunicipioPersistence) {
		this.oficinaServicioMunicipioPersistence = oficinaServicioMunicipioPersistence;
	}

	/**
	 * Returns the oficina tipo local service.
	 *
	 * @return the oficina tipo local service
	 */
	public cat.diba.oficinasvivienda.service.OficinaTipoLocalService getOficinaTipoLocalService() {
		return oficinaTipoLocalService;
	}

	/**
	 * Sets the oficina tipo local service.
	 *
	 * @param oficinaTipoLocalService the oficina tipo local service
	 */
	public void setOficinaTipoLocalService(
		cat.diba.oficinasvivienda.service.OficinaTipoLocalService oficinaTipoLocalService) {
		this.oficinaTipoLocalService = oficinaTipoLocalService;
	}

	/**
	 * Returns the oficina tipo persistence.
	 *
	 * @return the oficina tipo persistence
	 */
	public OficinaTipoPersistence getOficinaTipoPersistence() {
		return oficinaTipoPersistence;
	}

	/**
	 * Sets the oficina tipo persistence.
	 *
	 * @param oficinaTipoPersistence the oficina tipo persistence
	 */
	public void setOficinaTipoPersistence(
		OficinaTipoPersistence oficinaTipoPersistence) {
		this.oficinaTipoPersistence = oficinaTipoPersistence;
	}

	/**
	 * Returns the servicio local service.
	 *
	 * @return the servicio local service
	 */
	public cat.diba.oficinasvivienda.service.ServicioLocalService getServicioLocalService() {
		return servicioLocalService;
	}

	/**
	 * Sets the servicio local service.
	 *
	 * @param servicioLocalService the servicio local service
	 */
	public void setServicioLocalService(
		cat.diba.oficinasvivienda.service.ServicioLocalService servicioLocalService) {
		this.servicioLocalService = servicioLocalService;
	}

	/**
	 * Returns the servicio persistence.
	 *
	 * @return the servicio persistence
	 */
	public ServicioPersistence getServicioPersistence() {
		return servicioPersistence;
	}

	/**
	 * Sets the servicio persistence.
	 *
	 * @param servicioPersistence the servicio persistence
	 */
	public void setServicioPersistence(ServicioPersistence servicioPersistence) {
		this.servicioPersistence = servicioPersistence;
	}

	/**
	 * Returns the tipo local service.
	 *
	 * @return the tipo local service
	 */
	public cat.diba.oficinasvivienda.service.TipoLocalService getTipoLocalService() {
		return tipoLocalService;
	}

	/**
	 * Sets the tipo local service.
	 *
	 * @param tipoLocalService the tipo local service
	 */
	public void setTipoLocalService(
		cat.diba.oficinasvivienda.service.TipoLocalService tipoLocalService) {
		this.tipoLocalService = tipoLocalService;
	}

	/**
	 * Returns the tipo persistence.
	 *
	 * @return the tipo persistence
	 */
	public TipoPersistence getTipoPersistence() {
		return tipoPersistence;
	}

	/**
	 * Sets the tipo persistence.
	 *
	 * @param tipoPersistence the tipo persistence
	 */
	public void setTipoPersistence(TipoPersistence tipoPersistence) {
		this.tipoPersistence = tipoPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("cat.diba.oficinasvivienda.model.Servicio",
			servicioLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"cat.diba.oficinasvivienda.model.Servicio");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Servicio.class;
	}

	protected String getModelClassName() {
		return Servicio.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = servicioPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = cat.diba.oficinasvivienda.service.MunicipioLocalService.class)
	protected cat.diba.oficinasvivienda.service.MunicipioLocalService municipioLocalService;
	@BeanReference(type = MunicipioPersistence.class)
	protected MunicipioPersistence municipioPersistence;
	@BeanReference(type = cat.diba.oficinasvivienda.service.OficinaServicioMunicipioLocalService.class)
	protected cat.diba.oficinasvivienda.service.OficinaServicioMunicipioLocalService oficinaServicioMunicipioLocalService;
	@BeanReference(type = OficinaServicioMunicipioPersistence.class)
	protected OficinaServicioMunicipioPersistence oficinaServicioMunicipioPersistence;
	@BeanReference(type = cat.diba.oficinasvivienda.service.OficinaTipoLocalService.class)
	protected cat.diba.oficinasvivienda.service.OficinaTipoLocalService oficinaTipoLocalService;
	@BeanReference(type = OficinaTipoPersistence.class)
	protected OficinaTipoPersistence oficinaTipoPersistence;
	@BeanReference(type = cat.diba.oficinasvivienda.service.ServicioLocalService.class)
	protected cat.diba.oficinasvivienda.service.ServicioLocalService servicioLocalService;
	@BeanReference(type = ServicioPersistence.class)
	protected ServicioPersistence servicioPersistence;
	@BeanReference(type = cat.diba.oficinasvivienda.service.TipoLocalService.class)
	protected cat.diba.oficinasvivienda.service.TipoLocalService tipoLocalService;
	@BeanReference(type = TipoPersistence.class)
	protected TipoPersistence tipoPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private ServicioLocalServiceClpInvoker _clpInvoker = new ServicioLocalServiceClpInvoker();
}