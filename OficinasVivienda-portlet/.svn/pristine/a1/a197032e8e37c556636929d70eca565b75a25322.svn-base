/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package cat.diba.oficinasvivienda.service.persistence;

import cat.diba.oficinasvivienda.NoSuchOficinaServicioMunicipioException;
import cat.diba.oficinasvivienda.model.OficinaServicioMunicipio;
import cat.diba.oficinasvivienda.model.impl.OficinaServicioMunicipioImpl;
import cat.diba.oficinasvivienda.model.impl.OficinaServicioMunicipioModelImpl;

import com.liferay.portal.kernel.cache.CacheRegistryUtil;
import com.liferay.portal.kernel.dao.orm.EntityCacheUtil;
import com.liferay.portal.kernel.dao.orm.FinderCacheUtil;
import com.liferay.portal.kernel.dao.orm.FinderPath;
import com.liferay.portal.kernel.dao.orm.Query;
import com.liferay.portal.kernel.dao.orm.QueryPos;
import com.liferay.portal.kernel.dao.orm.QueryUtil;
import com.liferay.portal.kernel.dao.orm.Session;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.InstanceFactory;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PropsKeys;
import com.liferay.portal.kernel.util.PropsUtil;
import com.liferay.portal.kernel.util.SetUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.UnmodifiableList;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.ModelListener;
import com.liferay.portal.service.persistence.impl.BasePersistenceImpl;

import java.io.Serializable;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Set;

/**
 * The persistence implementation for the oficina servicio municipio service.
 *
 * <p>
 * Caching information and settings can be found in <code>portal.properties</code>
 * </p>
 *
 * @author gonzalezscr
 * @see OficinaServicioMunicipioPersistence
 * @see OficinaServicioMunicipioUtil
 * @generated
 */
public class OficinaServicioMunicipioPersistenceImpl extends BasePersistenceImpl<OficinaServicioMunicipio>
	implements OficinaServicioMunicipioPersistence {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link OficinaServicioMunicipioUtil} to access the oficina servicio municipio persistence. Modify <code>service.xml</code> and rerun ServiceBuilder to regenerate this class.
	 */
	public static final String FINDER_CLASS_NAME_ENTITY = OficinaServicioMunicipioImpl.class.getName();
	public static final String FINDER_CLASS_NAME_LIST_WITH_PAGINATION = FINDER_CLASS_NAME_ENTITY +
		".List1";
	public static final String FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION = FINDER_CLASS_NAME_ENTITY +
		".List2";
	public static final FinderPath FINDER_PATH_WITH_PAGINATION_FIND_ALL = new FinderPath(OficinaServicioMunicipioModelImpl.ENTITY_CACHE_ENABLED,
			OficinaServicioMunicipioModelImpl.FINDER_CACHE_ENABLED,
			OficinaServicioMunicipioImpl.class,
			FINDER_CLASS_NAME_LIST_WITH_PAGINATION, "findAll", new String[0]);
	public static final FinderPath FINDER_PATH_WITHOUT_PAGINATION_FIND_ALL = new FinderPath(OficinaServicioMunicipioModelImpl.ENTITY_CACHE_ENABLED,
			OficinaServicioMunicipioModelImpl.FINDER_CACHE_ENABLED,
			OficinaServicioMunicipioImpl.class,
			FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION, "findAll", new String[0]);
	public static final FinderPath FINDER_PATH_COUNT_ALL = new FinderPath(OficinaServicioMunicipioModelImpl.ENTITY_CACHE_ENABLED,
			OficinaServicioMunicipioModelImpl.FINDER_CACHE_ENABLED, Long.class,
			FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION, "countAll", new String[0]);
	public static final FinderPath FINDER_PATH_FETCH_BY_OFICINASERVICIOMUNICIPIO =
		new FinderPath(OficinaServicioMunicipioModelImpl.ENTITY_CACHE_ENABLED,
			OficinaServicioMunicipioModelImpl.FINDER_CACHE_ENABLED,
			OficinaServicioMunicipioImpl.class, FINDER_CLASS_NAME_ENTITY,
			"fetchByOficinaServicioMunicipio",
			new String[] { Long.class.getName() },
			OficinaServicioMunicipioModelImpl.IDOFICINA_COLUMN_BITMASK);
	public static final FinderPath FINDER_PATH_COUNT_BY_OFICINASERVICIOMUNICIPIO =
		new FinderPath(OficinaServicioMunicipioModelImpl.ENTITY_CACHE_ENABLED,
			OficinaServicioMunicipioModelImpl.FINDER_CACHE_ENABLED, Long.class,
			FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION,
			"countByOficinaServicioMunicipio",
			new String[] { Long.class.getName() });

	/**
	 * Returns the oficina servicio municipio where idOficina = &#63; or throws a {@link cat.diba.oficinasvivienda.NoSuchOficinaServicioMunicipioException} if it could not be found.
	 *
	 * @param idOficina the id oficina
	 * @return the matching oficina servicio municipio
	 * @throws cat.diba.oficinasvivienda.NoSuchOficinaServicioMunicipioException if a matching oficina servicio municipio could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public OficinaServicioMunicipio findByOficinaServicioMunicipio(
		long idOficina)
		throws NoSuchOficinaServicioMunicipioException, SystemException {
		OficinaServicioMunicipio oficinaServicioMunicipio = fetchByOficinaServicioMunicipio(idOficina);

		if (oficinaServicioMunicipio == null) {
			StringBundler msg = new StringBundler(4);

			msg.append(_NO_SUCH_ENTITY_WITH_KEY);

			msg.append("idOficina=");
			msg.append(idOficina);

			msg.append(StringPool.CLOSE_CURLY_BRACE);

			if (_log.isWarnEnabled()) {
				_log.warn(msg.toString());
			}

			throw new NoSuchOficinaServicioMunicipioException(msg.toString());
		}

		return oficinaServicioMunicipio;
	}

	/**
	 * Returns the oficina servicio municipio where idOficina = &#63; or returns <code>null</code> if it could not be found. Uses the finder cache.
	 *
	 * @param idOficina the id oficina
	 * @return the matching oficina servicio municipio, or <code>null</code> if a matching oficina servicio municipio could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public OficinaServicioMunicipio fetchByOficinaServicioMunicipio(
		long idOficina) throws SystemException {
		return fetchByOficinaServicioMunicipio(idOficina, true);
	}

	/**
	 * Returns the oficina servicio municipio where idOficina = &#63; or returns <code>null</code> if it could not be found, optionally using the finder cache.
	 *
	 * @param idOficina the id oficina
	 * @param retrieveFromCache whether to use the finder cache
	 * @return the matching oficina servicio municipio, or <code>null</code> if a matching oficina servicio municipio could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public OficinaServicioMunicipio fetchByOficinaServicioMunicipio(
		long idOficina, boolean retrieveFromCache) throws SystemException {
		Object[] finderArgs = new Object[] { idOficina };

		Object result = null;

		if (retrieveFromCache) {
			result = FinderCacheUtil.getResult(FINDER_PATH_FETCH_BY_OFICINASERVICIOMUNICIPIO,
					finderArgs, this);
		}

		if (result instanceof OficinaServicioMunicipio) {
			OficinaServicioMunicipio oficinaServicioMunicipio = (OficinaServicioMunicipio)result;

			if ((idOficina != oficinaServicioMunicipio.getIdOficina())) {
				result = null;
			}
		}

		if (result == null) {
			StringBundler query = new StringBundler(3);

			query.append(_SQL_SELECT_OFICINASERVICIOMUNICIPIO_WHERE);

			query.append(_FINDER_COLUMN_OFICINASERVICIOMUNICIPIO_IDOFICINA_2);

			String sql = query.toString();

			Session session = null;

			try {
				session = openSession();

				Query q = session.createQuery(sql);

				QueryPos qPos = QueryPos.getInstance(q);

				qPos.add(idOficina);

				List<OficinaServicioMunicipio> list = q.list();

				if (list.isEmpty()) {
					FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_OFICINASERVICIOMUNICIPIO,
						finderArgs, list);
				}
				else {
					if ((list.size() > 1) && _log.isWarnEnabled()) {
						_log.warn(
							"OficinaServicioMunicipioPersistenceImpl.fetchByOficinaServicioMunicipio(long, boolean) with parameters (" +
							StringUtil.merge(finderArgs) +
							") yields a result set with more than 1 result. This violates the logical unique restriction. There is no order guarantee on which result is returned by this finder.");
					}

					OficinaServicioMunicipio oficinaServicioMunicipio = list.get(0);

					result = oficinaServicioMunicipio;

					cacheResult(oficinaServicioMunicipio);

					if ((oficinaServicioMunicipio.getIdOficina() != idOficina)) {
						FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_OFICINASERVICIOMUNICIPIO,
							finderArgs, oficinaServicioMunicipio);
					}
				}
			}
			catch (Exception e) {
				FinderCacheUtil.removeResult(FINDER_PATH_FETCH_BY_OFICINASERVICIOMUNICIPIO,
					finderArgs);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		if (result instanceof List<?>) {
			return null;
		}
		else {
			return (OficinaServicioMunicipio)result;
		}
	}

	/**
	 * Removes the oficina servicio municipio where idOficina = &#63; from the database.
	 *
	 * @param idOficina the id oficina
	 * @return the oficina servicio municipio that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public OficinaServicioMunicipio removeByOficinaServicioMunicipio(
		long idOficina)
		throws NoSuchOficinaServicioMunicipioException, SystemException {
		OficinaServicioMunicipio oficinaServicioMunicipio = findByOficinaServicioMunicipio(idOficina);

		return remove(oficinaServicioMunicipio);
	}

	/**
	 * Returns the number of oficina servicio municipios where idOficina = &#63;.
	 *
	 * @param idOficina the id oficina
	 * @return the number of matching oficina servicio municipios
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int countByOficinaServicioMunicipio(long idOficina)
		throws SystemException {
		FinderPath finderPath = FINDER_PATH_COUNT_BY_OFICINASERVICIOMUNICIPIO;

		Object[] finderArgs = new Object[] { idOficina };

		Long count = (Long)FinderCacheUtil.getResult(finderPath, finderArgs,
				this);

		if (count == null) {
			StringBundler query = new StringBundler(2);

			query.append(_SQL_COUNT_OFICINASERVICIOMUNICIPIO_WHERE);

			query.append(_FINDER_COLUMN_OFICINASERVICIOMUNICIPIO_IDOFICINA_2);

			String sql = query.toString();

			Session session = null;

			try {
				session = openSession();

				Query q = session.createQuery(sql);

				QueryPos qPos = QueryPos.getInstance(q);

				qPos.add(idOficina);

				count = (Long)q.uniqueResult();

				FinderCacheUtil.putResult(finderPath, finderArgs, count);
			}
			catch (Exception e) {
				FinderCacheUtil.removeResult(finderPath, finderArgs);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		return count.intValue();
	}

	private static final String _FINDER_COLUMN_OFICINASERVICIOMUNICIPIO_IDOFICINA_2 =
		"oficinaServicioMunicipio.idOficina = ?";

	public OficinaServicioMunicipioPersistenceImpl() {
		setModelClass(OficinaServicioMunicipio.class);
	}

	/**
	 * Caches the oficina servicio municipio in the entity cache if it is enabled.
	 *
	 * @param oficinaServicioMunicipio the oficina servicio municipio
	 */
	@Override
	public void cacheResult(OficinaServicioMunicipio oficinaServicioMunicipio) {
		EntityCacheUtil.putResult(OficinaServicioMunicipioModelImpl.ENTITY_CACHE_ENABLED,
			OficinaServicioMunicipioImpl.class,
			oficinaServicioMunicipio.getPrimaryKey(), oficinaServicioMunicipio);

		FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_OFICINASERVICIOMUNICIPIO,
			new Object[] { oficinaServicioMunicipio.getIdOficina() },
			oficinaServicioMunicipio);

		oficinaServicioMunicipio.resetOriginalValues();
	}

	/**
	 * Caches the oficina servicio municipios in the entity cache if it is enabled.
	 *
	 * @param oficinaServicioMunicipios the oficina servicio municipios
	 */
	@Override
	public void cacheResult(
		List<OficinaServicioMunicipio> oficinaServicioMunicipios) {
		for (OficinaServicioMunicipio oficinaServicioMunicipio : oficinaServicioMunicipios) {
			if (EntityCacheUtil.getResult(
						OficinaServicioMunicipioModelImpl.ENTITY_CACHE_ENABLED,
						OficinaServicioMunicipioImpl.class,
						oficinaServicioMunicipio.getPrimaryKey()) == null) {
				cacheResult(oficinaServicioMunicipio);
			}
			else {
				oficinaServicioMunicipio.resetOriginalValues();
			}
		}
	}

	/**
	 * Clears the cache for all oficina servicio municipios.
	 *
	 * <p>
	 * The {@link com.liferay.portal.kernel.dao.orm.EntityCache} and {@link com.liferay.portal.kernel.dao.orm.FinderCache} are both cleared by this method.
	 * </p>
	 */
	@Override
	public void clearCache() {
		if (_HIBERNATE_CACHE_USE_SECOND_LEVEL_CACHE) {
			CacheRegistryUtil.clear(OficinaServicioMunicipioImpl.class.getName());
		}

		EntityCacheUtil.clearCache(OficinaServicioMunicipioImpl.class.getName());

		FinderCacheUtil.clearCache(FINDER_CLASS_NAME_ENTITY);
		FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
		FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
	}

	/**
	 * Clears the cache for the oficina servicio municipio.
	 *
	 * <p>
	 * The {@link com.liferay.portal.kernel.dao.orm.EntityCache} and {@link com.liferay.portal.kernel.dao.orm.FinderCache} are both cleared by this method.
	 * </p>
	 */
	@Override
	public void clearCache(OficinaServicioMunicipio oficinaServicioMunicipio) {
		EntityCacheUtil.removeResult(OficinaServicioMunicipioModelImpl.ENTITY_CACHE_ENABLED,
			OficinaServicioMunicipioImpl.class,
			oficinaServicioMunicipio.getPrimaryKey());

		FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
		FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);

		clearUniqueFindersCache(oficinaServicioMunicipio);
	}

	@Override
	public void clearCache(
		List<OficinaServicioMunicipio> oficinaServicioMunicipios) {
		FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
		FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);

		for (OficinaServicioMunicipio oficinaServicioMunicipio : oficinaServicioMunicipios) {
			EntityCacheUtil.removeResult(OficinaServicioMunicipioModelImpl.ENTITY_CACHE_ENABLED,
				OficinaServicioMunicipioImpl.class,
				oficinaServicioMunicipio.getPrimaryKey());

			clearUniqueFindersCache(oficinaServicioMunicipio);
		}
	}

	protected void cacheUniqueFindersCache(
		OficinaServicioMunicipio oficinaServicioMunicipio) {
		if (oficinaServicioMunicipio.isNew()) {
			Object[] args = new Object[] { oficinaServicioMunicipio.getIdOficina() };

			FinderCacheUtil.putResult(FINDER_PATH_COUNT_BY_OFICINASERVICIOMUNICIPIO,
				args, Long.valueOf(1));
			FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_OFICINASERVICIOMUNICIPIO,
				args, oficinaServicioMunicipio);
		}
		else {
			OficinaServicioMunicipioModelImpl oficinaServicioMunicipioModelImpl = (OficinaServicioMunicipioModelImpl)oficinaServicioMunicipio;

			if ((oficinaServicioMunicipioModelImpl.getColumnBitmask() &
					FINDER_PATH_FETCH_BY_OFICINASERVICIOMUNICIPIO.getColumnBitmask()) != 0) {
				Object[] args = new Object[] {
						oficinaServicioMunicipio.getIdOficina()
					};

				FinderCacheUtil.putResult(FINDER_PATH_COUNT_BY_OFICINASERVICIOMUNICIPIO,
					args, Long.valueOf(1));
				FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_OFICINASERVICIOMUNICIPIO,
					args, oficinaServicioMunicipio);
			}
		}
	}

	protected void clearUniqueFindersCache(
		OficinaServicioMunicipio oficinaServicioMunicipio) {
		OficinaServicioMunicipioModelImpl oficinaServicioMunicipioModelImpl = (OficinaServicioMunicipioModelImpl)oficinaServicioMunicipio;

		Object[] args = new Object[] { oficinaServicioMunicipio.getIdOficina() };

		FinderCacheUtil.removeResult(FINDER_PATH_COUNT_BY_OFICINASERVICIOMUNICIPIO,
			args);
		FinderCacheUtil.removeResult(FINDER_PATH_FETCH_BY_OFICINASERVICIOMUNICIPIO,
			args);

		if ((oficinaServicioMunicipioModelImpl.getColumnBitmask() &
				FINDER_PATH_FETCH_BY_OFICINASERVICIOMUNICIPIO.getColumnBitmask()) != 0) {
			args = new Object[] {
					oficinaServicioMunicipioModelImpl.getOriginalIdOficina()
				};

			FinderCacheUtil.removeResult(FINDER_PATH_COUNT_BY_OFICINASERVICIOMUNICIPIO,
				args);
			FinderCacheUtil.removeResult(FINDER_PATH_FETCH_BY_OFICINASERVICIOMUNICIPIO,
				args);
		}
	}

	/**
	 * Creates a new oficina servicio municipio with the primary key. Does not add the oficina servicio municipio to the database.
	 *
	 * @param id the primary key for the new oficina servicio municipio
	 * @return the new oficina servicio municipio
	 */
	@Override
	public OficinaServicioMunicipio create(long id) {
		OficinaServicioMunicipio oficinaServicioMunicipio = new OficinaServicioMunicipioImpl();

		oficinaServicioMunicipio.setNew(true);
		oficinaServicioMunicipio.setPrimaryKey(id);

		return oficinaServicioMunicipio;
	}

	/**
	 * Removes the oficina servicio municipio with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the oficina servicio municipio
	 * @return the oficina servicio municipio that was removed
	 * @throws cat.diba.oficinasvivienda.NoSuchOficinaServicioMunicipioException if a oficina servicio municipio with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public OficinaServicioMunicipio remove(long id)
		throws NoSuchOficinaServicioMunicipioException, SystemException {
		return remove((Serializable)id);
	}

	/**
	 * Removes the oficina servicio municipio with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param primaryKey the primary key of the oficina servicio municipio
	 * @return the oficina servicio municipio that was removed
	 * @throws cat.diba.oficinasvivienda.NoSuchOficinaServicioMunicipioException if a oficina servicio municipio with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public OficinaServicioMunicipio remove(Serializable primaryKey)
		throws NoSuchOficinaServicioMunicipioException, SystemException {
		Session session = null;

		try {
			session = openSession();

			OficinaServicioMunicipio oficinaServicioMunicipio = (OficinaServicioMunicipio)session.get(OficinaServicioMunicipioImpl.class,
					primaryKey);

			if (oficinaServicioMunicipio == null) {
				if (_log.isWarnEnabled()) {
					_log.warn(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);
				}

				throw new NoSuchOficinaServicioMunicipioException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +
					primaryKey);
			}

			return remove(oficinaServicioMunicipio);
		}
		catch (NoSuchOficinaServicioMunicipioException nsee) {
			throw nsee;
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}
	}

	@Override
	protected OficinaServicioMunicipio removeImpl(
		OficinaServicioMunicipio oficinaServicioMunicipio)
		throws SystemException {
		oficinaServicioMunicipio = toUnwrappedModel(oficinaServicioMunicipio);

		Session session = null;

		try {
			session = openSession();

			if (!session.contains(oficinaServicioMunicipio)) {
				oficinaServicioMunicipio = (OficinaServicioMunicipio)session.get(OficinaServicioMunicipioImpl.class,
						oficinaServicioMunicipio.getPrimaryKeyObj());
			}

			if (oficinaServicioMunicipio != null) {
				session.delete(oficinaServicioMunicipio);
			}
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}

		if (oficinaServicioMunicipio != null) {
			clearCache(oficinaServicioMunicipio);
		}

		return oficinaServicioMunicipio;
	}

	@Override
	public OficinaServicioMunicipio updateImpl(
		cat.diba.oficinasvivienda.model.OficinaServicioMunicipio oficinaServicioMunicipio)
		throws SystemException {
		oficinaServicioMunicipio = toUnwrappedModel(oficinaServicioMunicipio);

		boolean isNew = oficinaServicioMunicipio.isNew();

		Session session = null;

		try {
			session = openSession();

			if (oficinaServicioMunicipio.isNew()) {
				session.save(oficinaServicioMunicipio);

				oficinaServicioMunicipio.setNew(false);
			}
			else {
				session.merge(oficinaServicioMunicipio);
			}
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}

		FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);

		if (isNew || !OficinaServicioMunicipioModelImpl.COLUMN_BITMASK_ENABLED) {
			FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
		}

		EntityCacheUtil.putResult(OficinaServicioMunicipioModelImpl.ENTITY_CACHE_ENABLED,
			OficinaServicioMunicipioImpl.class,
			oficinaServicioMunicipio.getPrimaryKey(), oficinaServicioMunicipio);

		clearUniqueFindersCache(oficinaServicioMunicipio);
		cacheUniqueFindersCache(oficinaServicioMunicipio);

		return oficinaServicioMunicipio;
	}

	protected OficinaServicioMunicipio toUnwrappedModel(
		OficinaServicioMunicipio oficinaServicioMunicipio) {
		if (oficinaServicioMunicipio instanceof OficinaServicioMunicipioImpl) {
			return oficinaServicioMunicipio;
		}

		OficinaServicioMunicipioImpl oficinaServicioMunicipioImpl = new OficinaServicioMunicipioImpl();

		oficinaServicioMunicipioImpl.setNew(oficinaServicioMunicipio.isNew());
		oficinaServicioMunicipioImpl.setPrimaryKey(oficinaServicioMunicipio.getPrimaryKey());

		oficinaServicioMunicipioImpl.setId(oficinaServicioMunicipio.getId());
		oficinaServicioMunicipioImpl.setIdOficina(oficinaServicioMunicipio.getIdOficina());
		oficinaServicioMunicipioImpl.setIdServicio(oficinaServicioMunicipio.getIdServicio());
		oficinaServicioMunicipioImpl.setCodigoIne(oficinaServicioMunicipio.getCodigoIne());

		return oficinaServicioMunicipioImpl;
	}

	/**
	 * Returns the oficina servicio municipio with the primary key or throws a {@link com.liferay.portal.NoSuchModelException} if it could not be found.
	 *
	 * @param primaryKey the primary key of the oficina servicio municipio
	 * @return the oficina servicio municipio
	 * @throws cat.diba.oficinasvivienda.NoSuchOficinaServicioMunicipioException if a oficina servicio municipio with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public OficinaServicioMunicipio findByPrimaryKey(Serializable primaryKey)
		throws NoSuchOficinaServicioMunicipioException, SystemException {
		OficinaServicioMunicipio oficinaServicioMunicipio = fetchByPrimaryKey(primaryKey);

		if (oficinaServicioMunicipio == null) {
			if (_log.isWarnEnabled()) {
				_log.warn(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);
			}

			throw new NoSuchOficinaServicioMunicipioException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +
				primaryKey);
		}

		return oficinaServicioMunicipio;
	}

	/**
	 * Returns the oficina servicio municipio with the primary key or throws a {@link cat.diba.oficinasvivienda.NoSuchOficinaServicioMunicipioException} if it could not be found.
	 *
	 * @param id the primary key of the oficina servicio municipio
	 * @return the oficina servicio municipio
	 * @throws cat.diba.oficinasvivienda.NoSuchOficinaServicioMunicipioException if a oficina servicio municipio with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public OficinaServicioMunicipio findByPrimaryKey(long id)
		throws NoSuchOficinaServicioMunicipioException, SystemException {
		return findByPrimaryKey((Serializable)id);
	}

	/**
	 * Returns the oficina servicio municipio with the primary key or returns <code>null</code> if it could not be found.
	 *
	 * @param primaryKey the primary key of the oficina servicio municipio
	 * @return the oficina servicio municipio, or <code>null</code> if a oficina servicio municipio with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public OficinaServicioMunicipio fetchByPrimaryKey(Serializable primaryKey)
		throws SystemException {
		OficinaServicioMunicipio oficinaServicioMunicipio = (OficinaServicioMunicipio)EntityCacheUtil.getResult(OficinaServicioMunicipioModelImpl.ENTITY_CACHE_ENABLED,
				OficinaServicioMunicipioImpl.class, primaryKey);

		if (oficinaServicioMunicipio == _nullOficinaServicioMunicipio) {
			return null;
		}

		if (oficinaServicioMunicipio == null) {
			Session session = null;

			try {
				session = openSession();

				oficinaServicioMunicipio = (OficinaServicioMunicipio)session.get(OficinaServicioMunicipioImpl.class,
						primaryKey);

				if (oficinaServicioMunicipio != null) {
					cacheResult(oficinaServicioMunicipio);
				}
				else {
					EntityCacheUtil.putResult(OficinaServicioMunicipioModelImpl.ENTITY_CACHE_ENABLED,
						OficinaServicioMunicipioImpl.class, primaryKey,
						_nullOficinaServicioMunicipio);
				}
			}
			catch (Exception e) {
				EntityCacheUtil.removeResult(OficinaServicioMunicipioModelImpl.ENTITY_CACHE_ENABLED,
					OficinaServicioMunicipioImpl.class, primaryKey);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		return oficinaServicioMunicipio;
	}

	/**
	 * Returns the oficina servicio municipio with the primary key or returns <code>null</code> if it could not be found.
	 *
	 * @param id the primary key of the oficina servicio municipio
	 * @return the oficina servicio municipio, or <code>null</code> if a oficina servicio municipio with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public OficinaServicioMunicipio fetchByPrimaryKey(long id)
		throws SystemException {
		return fetchByPrimaryKey((Serializable)id);
	}

	/**
	 * Returns all the oficina servicio municipios.
	 *
	 * @return the oficina servicio municipios
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<OficinaServicioMunicipio> findAll() throws SystemException {
		return findAll(QueryUtil.ALL_POS, QueryUtil.ALL_POS, null);
	}

	/**
	 * Returns a range of all the oficina servicio municipios.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link cat.diba.oficinasvivienda.model.impl.OficinaServicioMunicipioModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of oficina servicio municipios
	 * @param end the upper bound of the range of oficina servicio municipios (not inclusive)
	 * @return the range of oficina servicio municipios
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<OficinaServicioMunicipio> findAll(int start, int end)
		throws SystemException {
		return findAll(start, end, null);
	}

	/**
	 * Returns an ordered range of all the oficina servicio municipios.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link cat.diba.oficinasvivienda.model.impl.OficinaServicioMunicipioModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of oficina servicio municipios
	 * @param end the upper bound of the range of oficina servicio municipios (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of oficina servicio municipios
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<OficinaServicioMunicipio> findAll(int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		boolean pagination = true;
		FinderPath finderPath = null;
		Object[] finderArgs = null;

		if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) &&
				(orderByComparator == null)) {
			pagination = false;
			finderPath = FINDER_PATH_WITHOUT_PAGINATION_FIND_ALL;
			finderArgs = FINDER_ARGS_EMPTY;
		}
		else {
			finderPath = FINDER_PATH_WITH_PAGINATION_FIND_ALL;
			finderArgs = new Object[] { start, end, orderByComparator };
		}

		List<OficinaServicioMunicipio> list = (List<OficinaServicioMunicipio>)FinderCacheUtil.getResult(finderPath,
				finderArgs, this);

		if (list == null) {
			StringBundler query = null;
			String sql = null;

			if (orderByComparator != null) {
				query = new StringBundler(2 +
						(orderByComparator.getOrderByFields().length * 3));

				query.append(_SQL_SELECT_OFICINASERVICIOMUNICIPIO);

				appendOrderByComparator(query, _ORDER_BY_ENTITY_ALIAS,
					orderByComparator);

				sql = query.toString();
			}
			else {
				sql = _SQL_SELECT_OFICINASERVICIOMUNICIPIO;

				if (pagination) {
					sql = sql.concat(OficinaServicioMunicipioModelImpl.ORDER_BY_JPQL);
				}
			}

			Session session = null;

			try {
				session = openSession();

				Query q = session.createQuery(sql);

				if (!pagination) {
					list = (List<OficinaServicioMunicipio>)QueryUtil.list(q,
							getDialect(), start, end, false);

					Collections.sort(list);

					list = new UnmodifiableList<OficinaServicioMunicipio>(list);
				}
				else {
					list = (List<OficinaServicioMunicipio>)QueryUtil.list(q,
							getDialect(), start, end);
				}

				cacheResult(list);

				FinderCacheUtil.putResult(finderPath, finderArgs, list);
			}
			catch (Exception e) {
				FinderCacheUtil.removeResult(finderPath, finderArgs);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		return list;
	}

	/**
	 * Removes all the oficina servicio municipios from the database.
	 *
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void removeAll() throws SystemException {
		for (OficinaServicioMunicipio oficinaServicioMunicipio : findAll()) {
			remove(oficinaServicioMunicipio);
		}
	}

	/**
	 * Returns the number of oficina servicio municipios.
	 *
	 * @return the number of oficina servicio municipios
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int countAll() throws SystemException {
		Long count = (Long)FinderCacheUtil.getResult(FINDER_PATH_COUNT_ALL,
				FINDER_ARGS_EMPTY, this);

		if (count == null) {
			Session session = null;

			try {
				session = openSession();

				Query q = session.createQuery(_SQL_COUNT_OFICINASERVICIOMUNICIPIO);

				count = (Long)q.uniqueResult();

				FinderCacheUtil.putResult(FINDER_PATH_COUNT_ALL,
					FINDER_ARGS_EMPTY, count);
			}
			catch (Exception e) {
				FinderCacheUtil.removeResult(FINDER_PATH_COUNT_ALL,
					FINDER_ARGS_EMPTY);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		return count.intValue();
	}

	@Override
	protected Set<String> getBadColumnNames() {
		return _badColumnNames;
	}

	/**
	 * Initializes the oficina servicio municipio persistence.
	 */
	public void afterPropertiesSet() {
		String[] listenerClassNames = StringUtil.split(GetterUtil.getString(
					com.liferay.util.service.ServiceProps.get(
						"value.object.listener.cat.diba.oficinasvivienda.model.OficinaServicioMunicipio")));

		if (listenerClassNames.length > 0) {
			try {
				List<ModelListener<OficinaServicioMunicipio>> listenersList = new ArrayList<ModelListener<OficinaServicioMunicipio>>();

				for (String listenerClassName : listenerClassNames) {
					listenersList.add((ModelListener<OficinaServicioMunicipio>)InstanceFactory.newInstance(
							getClassLoader(), listenerClassName));
				}

				listeners = listenersList.toArray(new ModelListener[listenersList.size()]);
			}
			catch (Exception e) {
				_log.error(e);
			}
		}
	}

	public void destroy() {
		EntityCacheUtil.removeCache(OficinaServicioMunicipioImpl.class.getName());
		FinderCacheUtil.removeCache(FINDER_CLASS_NAME_ENTITY);
		FinderCacheUtil.removeCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
		FinderCacheUtil.removeCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
	}

	private static final String _SQL_SELECT_OFICINASERVICIOMUNICIPIO = "SELECT oficinaServicioMunicipio FROM OficinaServicioMunicipio oficinaServicioMunicipio";
	private static final String _SQL_SELECT_OFICINASERVICIOMUNICIPIO_WHERE = "SELECT oficinaServicioMunicipio FROM OficinaServicioMunicipio oficinaServicioMunicipio WHERE ";
	private static final String _SQL_COUNT_OFICINASERVICIOMUNICIPIO = "SELECT COUNT(oficinaServicioMunicipio) FROM OficinaServicioMunicipio oficinaServicioMunicipio";
	private static final String _SQL_COUNT_OFICINASERVICIOMUNICIPIO_WHERE = "SELECT COUNT(oficinaServicioMunicipio) FROM OficinaServicioMunicipio oficinaServicioMunicipio WHERE ";
	private static final String _ORDER_BY_ENTITY_ALIAS = "oficinaServicioMunicipio.";
	private static final String _NO_SUCH_ENTITY_WITH_PRIMARY_KEY = "No OficinaServicioMunicipio exists with the primary key ";
	private static final String _NO_SUCH_ENTITY_WITH_KEY = "No OficinaServicioMunicipio exists with the key {";
	private static final boolean _HIBERNATE_CACHE_USE_SECOND_LEVEL_CACHE = GetterUtil.getBoolean(PropsUtil.get(
				PropsKeys.HIBERNATE_CACHE_USE_SECOND_LEVEL_CACHE));
	private static Log _log = LogFactoryUtil.getLog(OficinaServicioMunicipioPersistenceImpl.class);
	private static Set<String> _badColumnNames = SetUtil.fromArray(new String[] {
				"id"
			});
	private static OficinaServicioMunicipio _nullOficinaServicioMunicipio = new OficinaServicioMunicipioImpl() {
			@Override
			public Object clone() {
				return this;
			}

			@Override
			public CacheModel<OficinaServicioMunicipio> toCacheModel() {
				return _nullOficinaServicioMunicipioCacheModel;
			}
		};

	private static CacheModel<OficinaServicioMunicipio> _nullOficinaServicioMunicipioCacheModel =
		new CacheModel<OficinaServicioMunicipio>() {
			@Override
			public OficinaServicioMunicipio toEntityModel() {
				return _nullOficinaServicioMunicipio;
			}
		};
}