/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package cat.diba.oficinasvivienda.service;

import com.liferay.portal.service.ServiceWrapper;

/**
 * Provides a wrapper for {@link OficinaTipoLocalService}.
 *
 * @author gonzalezscr
 * @see OficinaTipoLocalService
 * @generated
 */
public class OficinaTipoLocalServiceWrapper implements OficinaTipoLocalService,
	ServiceWrapper<OficinaTipoLocalService> {
	public OficinaTipoLocalServiceWrapper(
		OficinaTipoLocalService oficinaTipoLocalService) {
		_oficinaTipoLocalService = oficinaTipoLocalService;
	}

	/**
	* Adds the oficina tipo to the database. Also notifies the appropriate model listeners.
	*
	* @param oficinaTipo the oficina tipo
	* @return the oficina tipo that was added
	* @throws SystemException if a system exception occurred
	*/
	@Override
	public cat.diba.oficinasvivienda.model.OficinaTipo addOficinaTipo(
		cat.diba.oficinasvivienda.model.OficinaTipo oficinaTipo)
		throws com.liferay.portal.kernel.exception.SystemException {
		return _oficinaTipoLocalService.addOficinaTipo(oficinaTipo);
	}

	/**
	* Creates a new oficina tipo with the primary key. Does not add the oficina tipo to the database.
	*
	* @param id the primary key for the new oficina tipo
	* @return the new oficina tipo
	*/
	@Override
	public cat.diba.oficinasvivienda.model.OficinaTipo createOficinaTipo(
		long id) {
		return _oficinaTipoLocalService.createOficinaTipo(id);
	}

	/**
	* Deletes the oficina tipo with the primary key from the database. Also notifies the appropriate model listeners.
	*
	* @param id the primary key of the oficina tipo
	* @return the oficina tipo that was removed
	* @throws PortalException if a oficina tipo with the primary key could not be found
	* @throws SystemException if a system exception occurred
	*/
	@Override
	public cat.diba.oficinasvivienda.model.OficinaTipo deleteOficinaTipo(
		long id)
		throws com.liferay.portal.kernel.exception.PortalException,
			com.liferay.portal.kernel.exception.SystemException {
		return _oficinaTipoLocalService.deleteOficinaTipo(id);
	}

	/**
	* Deletes the oficina tipo from the database. Also notifies the appropriate model listeners.
	*
	* @param oficinaTipo the oficina tipo
	* @return the oficina tipo that was removed
	* @throws SystemException if a system exception occurred
	*/
	@Override
	public cat.diba.oficinasvivienda.model.OficinaTipo deleteOficinaTipo(
		cat.diba.oficinasvivienda.model.OficinaTipo oficinaTipo)
		throws com.liferay.portal.kernel.exception.SystemException {
		return _oficinaTipoLocalService.deleteOficinaTipo(oficinaTipo);
	}

	@Override
	public com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery() {
		return _oficinaTipoLocalService.dynamicQuery();
	}

	/**
	* Performs a dynamic query on the database and returns the matching rows.
	*
	* @param dynamicQuery the dynamic query
	* @return the matching rows
	* @throws SystemException if a system exception occurred
	*/
	@Override
	@SuppressWarnings("rawtypes")
	public java.util.List dynamicQuery(
		com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery)
		throws com.liferay.portal.kernel.exception.SystemException {
		return _oficinaTipoLocalService.dynamicQuery(dynamicQuery);
	}

	/**
	* Performs a dynamic query on the database and returns a range of the matching rows.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link cat.diba.oficinasvivienda.model.impl.OficinaTipoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param dynamicQuery the dynamic query
	* @param start the lower bound of the range of model instances
	* @param end the upper bound of the range of model instances (not inclusive)
	* @return the range of matching rows
	* @throws SystemException if a system exception occurred
	*/
	@Override
	@SuppressWarnings("rawtypes")
	public java.util.List dynamicQuery(
		com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery, int start,
		int end) throws com.liferay.portal.kernel.exception.SystemException {
		return _oficinaTipoLocalService.dynamicQuery(dynamicQuery, start, end);
	}

	/**
	* Performs a dynamic query on the database and returns an ordered range of the matching rows.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link cat.diba.oficinasvivienda.model.impl.OficinaTipoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param dynamicQuery the dynamic query
	* @param start the lower bound of the range of model instances
	* @param end the upper bound of the range of model instances (not inclusive)
	* @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	* @return the ordered range of matching rows
	* @throws SystemException if a system exception occurred
	*/
	@Override
	@SuppressWarnings("rawtypes")
	public java.util.List dynamicQuery(
		com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery, int start,
		int end,
		com.liferay.portal.kernel.util.OrderByComparator orderByComparator)
		throws com.liferay.portal.kernel.exception.SystemException {
		return _oficinaTipoLocalService.dynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	* Returns the number of rows that match the dynamic query.
	*
	* @param dynamicQuery the dynamic query
	* @return the number of rows that match the dynamic query
	* @throws SystemException if a system exception occurred
	*/
	@Override
	public long dynamicQueryCount(
		com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery)
		throws com.liferay.portal.kernel.exception.SystemException {
		return _oficinaTipoLocalService.dynamicQueryCount(dynamicQuery);
	}

	/**
	* Returns the number of rows that match the dynamic query.
	*
	* @param dynamicQuery the dynamic query
	* @param projection the projection to apply to the query
	* @return the number of rows that match the dynamic query
	* @throws SystemException if a system exception occurred
	*/
	@Override
	public long dynamicQueryCount(
		com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery,
		com.liferay.portal.kernel.dao.orm.Projection projection)
		throws com.liferay.portal.kernel.exception.SystemException {
		return _oficinaTipoLocalService.dynamicQueryCount(dynamicQuery,
			projection);
	}

	@Override
	public cat.diba.oficinasvivienda.model.OficinaTipo fetchOficinaTipo(long id)
		throws com.liferay.portal.kernel.exception.SystemException {
		return _oficinaTipoLocalService.fetchOficinaTipo(id);
	}

	/**
	* Returns the oficina tipo with the primary key.
	*
	* @param id the primary key of the oficina tipo
	* @return the oficina tipo
	* @throws PortalException if a oficina tipo with the primary key could not be found
	* @throws SystemException if a system exception occurred
	*/
	@Override
	public cat.diba.oficinasvivienda.model.OficinaTipo getOficinaTipo(long id)
		throws com.liferay.portal.kernel.exception.PortalException,
			com.liferay.portal.kernel.exception.SystemException {
		return _oficinaTipoLocalService.getOficinaTipo(id);
	}

	@Override
	public com.liferay.portal.model.PersistedModel getPersistedModel(
		java.io.Serializable primaryKeyObj)
		throws com.liferay.portal.kernel.exception.PortalException,
			com.liferay.portal.kernel.exception.SystemException {
		return _oficinaTipoLocalService.getPersistedModel(primaryKeyObj);
	}

	/**
	* Returns a range of all the oficina tipos.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link cat.diba.oficinasvivienda.model.impl.OficinaTipoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param start the lower bound of the range of oficina tipos
	* @param end the upper bound of the range of oficina tipos (not inclusive)
	* @return the range of oficina tipos
	* @throws SystemException if a system exception occurred
	*/
	@Override
	public java.util.List<cat.diba.oficinasvivienda.model.OficinaTipo> getOficinaTipos(
		int start, int end)
		throws com.liferay.portal.kernel.exception.SystemException {
		return _oficinaTipoLocalService.getOficinaTipos(start, end);
	}

	/**
	* Returns the number of oficina tipos.
	*
	* @return the number of oficina tipos
	* @throws SystemException if a system exception occurred
	*/
	@Override
	public int getOficinaTiposCount()
		throws com.liferay.portal.kernel.exception.SystemException {
		return _oficinaTipoLocalService.getOficinaTiposCount();
	}

	/**
	* Updates the oficina tipo in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	*
	* @param oficinaTipo the oficina tipo
	* @return the oficina tipo that was updated
	* @throws SystemException if a system exception occurred
	*/
	@Override
	public cat.diba.oficinasvivienda.model.OficinaTipo updateOficinaTipo(
		cat.diba.oficinasvivienda.model.OficinaTipo oficinaTipo)
		throws com.liferay.portal.kernel.exception.SystemException {
		return _oficinaTipoLocalService.updateOficinaTipo(oficinaTipo);
	}

	/**
	* Returns the Spring bean ID for this bean.
	*
	* @return the Spring bean ID for this bean
	*/
	@Override
	public java.lang.String getBeanIdentifier() {
		return _oficinaTipoLocalService.getBeanIdentifier();
	}

	/**
	* Sets the Spring bean ID for this bean.
	*
	* @param beanIdentifier the Spring bean ID for this bean
	*/
	@Override
	public void setBeanIdentifier(java.lang.String beanIdentifier) {
		_oficinaTipoLocalService.setBeanIdentifier(beanIdentifier);
	}

	@Override
	public java.lang.Object invokeMethod(java.lang.String name,
		java.lang.String[] parameterTypes, java.lang.Object[] arguments)
		throws java.lang.Throwable {
		return _oficinaTipoLocalService.invokeMethod(name, parameterTypes,
			arguments);
	}

	@Override
	public long obtenerTipoPorOficina(long idOficina) {
		return _oficinaTipoLocalService.obtenerTipoPorOficina(idOficina);
	}

	@Override
	public cat.diba.oficinasvivienda.model.OficinaTipo obtenerOficinaTipoPorOficina(
		long idOficina) {
		return _oficinaTipoLocalService.obtenerOficinaTipoPorOficina(idOficina);
	}

	@Override
	public java.util.List<cat.diba.oficinasvivienda.model.OficinaTipo> obtenerOficinaTipoPorTipo(
		long idTipo) {
		return _oficinaTipoLocalService.obtenerOficinaTipoPorTipo(idTipo);
	}

	@Override
	public cat.diba.oficinasvivienda.model.OficinaTipo nuevaOficinaTipo(
		cat.diba.oficinasvivienda.model.OficinaTipo ofiTipo) {
		return _oficinaTipoLocalService.nuevaOficinaTipo(ofiTipo);
	}

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #getWrappedService}
	 */
	public OficinaTipoLocalService getWrappedOficinaTipoLocalService() {
		return _oficinaTipoLocalService;
	}

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #setWrappedService}
	 */
	public void setWrappedOficinaTipoLocalService(
		OficinaTipoLocalService oficinaTipoLocalService) {
		_oficinaTipoLocalService = oficinaTipoLocalService;
	}

	@Override
	public OficinaTipoLocalService getWrappedService() {
		return _oficinaTipoLocalService;
	}

	@Override
	public void setWrappedService(
		OficinaTipoLocalService oficinaTipoLocalService) {
		_oficinaTipoLocalService = oficinaTipoLocalService;
	}

	private OficinaTipoLocalService _oficinaTipoLocalService;
}