/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package cat.diba.oficinasvivienda.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the Tipo service. Represents a row in the &quot;Tipo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link cat.diba.oficinasvivienda.model.impl.TipoModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link cat.diba.oficinasvivienda.model.impl.TipoImpl}.
 * </p>
 *
 * @author gonzalezscr
 * @see Tipo
 * @see cat.diba.oficinasvivienda.model.impl.TipoImpl
 * @see cat.diba.oficinasvivienda.model.impl.TipoModelImpl
 * @generated
 */
public interface TipoModel extends BaseModel<Tipo> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a tipo model instance should use the {@link Tipo} interface instead.
	 */

	/**
	 * Returns the primary key of this tipo.
	 *
	 * @return the primary key of this tipo
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this tipo.
	 *
	 * @param primaryKey the primary key of this tipo
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the id tipo of this tipo.
	 *
	 * @return the id tipo of this tipo
	 */
	public long getIdTipo();

	/**
	 * Sets the id tipo of this tipo.
	 *
	 * @param idTipo the id tipo of this tipo
	 */
	public void setIdTipo(long idTipo);

	/**
	 * Returns the company ID of this tipo.
	 *
	 * @return the company ID of this tipo
	 */
	public long getCompanyId();

	/**
	 * Sets the company ID of this tipo.
	 *
	 * @param companyId the company ID of this tipo
	 */
	public void setCompanyId(long companyId);

	/**
	 * Returns the group ID of this tipo.
	 *
	 * @return the group ID of this tipo
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this tipo.
	 *
	 * @param groupId the group ID of this tipo
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the nombre of this tipo.
	 *
	 * @return the nombre of this tipo
	 */
	public String getNombre();

	/**
	 * Returns the localized nombre of this tipo in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized nombre of this tipo
	 */
	@AutoEscape
	public String getNombre(Locale locale);

	/**
	 * Returns the localized nombre of this tipo in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized nombre of this tipo. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getNombre(Locale locale, boolean useDefault);

	/**
	 * Returns the localized nombre of this tipo in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized nombre of this tipo
	 */
	@AutoEscape
	public String getNombre(String languageId);

	/**
	 * Returns the localized nombre of this tipo in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized nombre of this tipo
	 */
	@AutoEscape
	public String getNombre(String languageId, boolean useDefault);

	@AutoEscape
	public String getNombreCurrentLanguageId();

	@AutoEscape
	public String getNombreCurrentValue();

	/**
	 * Returns a map of the locales and localized nombres of this tipo.
	 *
	 * @return the locales and localized nombres of this tipo
	 */
	public Map<Locale, String> getNombreMap();

	/**
	 * Sets the nombre of this tipo.
	 *
	 * @param nombre the nombre of this tipo
	 */
	public void setNombre(String nombre);

	/**
	 * Sets the localized nombre of this tipo in the language.
	 *
	 * @param nombre the localized nombre of this tipo
	 * @param locale the locale of the language
	 */
	public void setNombre(String nombre, Locale locale);

	/**
	 * Sets the localized nombre of this tipo in the language, and sets the default locale.
	 *
	 * @param nombre the localized nombre of this tipo
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setNombre(String nombre, Locale locale, Locale defaultLocale);

	public void setNombreCurrentLanguageId(String languageId);

	/**
	 * Sets the localized nombres of this tipo from the map of locales and localized nombres.
	 *
	 * @param nombreMap the locales and localized nombres of this tipo
	 */
	public void setNombreMap(Map<Locale, String> nombreMap);

	/**
	 * Sets the localized nombres of this tipo from the map of locales and localized nombres, and sets the default locale.
	 *
	 * @param nombreMap the locales and localized nombres of this tipo
	 * @param defaultLocale the default locale
	 */
	public void setNombreMap(Map<Locale, String> nombreMap, Locale defaultLocale);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(cat.diba.oficinasvivienda.model.Tipo tipo);

	@Override
	public int hashCode();

	@Override
	public CacheModel<cat.diba.oficinasvivienda.model.Tipo> toCacheModel();

	@Override
	public cat.diba.oficinasvivienda.model.Tipo toEscapedModel();

	@Override
	public cat.diba.oficinasvivienda.model.Tipo toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}