/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package cat.diba.oficinasvivienda.model;

import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.ModelWrapper;

import java.util.HashMap;
import java.util.Map;

/**
 * <p>
 * This class is a wrapper for {@link Tipo}.
 * </p>
 *
 * @author gonzalezscr
 * @see Tipo
 * @generated
 */
public class TipoWrapper implements Tipo, ModelWrapper<Tipo> {
	public TipoWrapper(Tipo tipo) {
		_tipo = tipo;
	}

	@Override
	public Class<?> getModelClass() {
		return Tipo.class;
	}

	@Override
	public String getModelClassName() {
		return Tipo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("idTipo", getIdTipo());
		attributes.put("nombre", getNombre());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long idTipo = (Long)attributes.get("idTipo");

		if (idTipo != null) {
			setIdTipo(idTipo);
		}

		String nombre = (String)attributes.get("nombre");

		if (nombre != null) {
			setNombre(nombre);
		}
	}

	/**
	* Returns the primary key of this tipo.
	*
	* @return the primary key of this tipo
	*/
	@Override
	public long getPrimaryKey() {
		return _tipo.getPrimaryKey();
	}

	/**
	* Sets the primary key of this tipo.
	*
	* @param primaryKey the primary key of this tipo
	*/
	@Override
	public void setPrimaryKey(long primaryKey) {
		_tipo.setPrimaryKey(primaryKey);
	}

	/**
	* Returns the id tipo of this tipo.
	*
	* @return the id tipo of this tipo
	*/
	@Override
	public long getIdTipo() {
		return _tipo.getIdTipo();
	}

	/**
	* Sets the id tipo of this tipo.
	*
	* @param idTipo the id tipo of this tipo
	*/
	@Override
	public void setIdTipo(long idTipo) {
		_tipo.setIdTipo(idTipo);
	}

	/**
	* Returns the nombre of this tipo.
	*
	* @return the nombre of this tipo
	*/
	@Override
	public java.lang.String getNombre() {
		return _tipo.getNombre();
	}

	/**
	* Returns the localized nombre of this tipo in the language. Uses the default language if no localization exists for the requested language.
	*
	* @param locale the locale of the language
	* @return the localized nombre of this tipo
	*/
	@Override
	public java.lang.String getNombre(java.util.Locale locale) {
		return _tipo.getNombre(locale);
	}

	/**
	* Returns the localized nombre of this tipo in the language, optionally using the default language if no localization exists for the requested language.
	*
	* @param locale the local of the language
	* @param useDefault whether to use the default language if no localization exists for the requested language
	* @return the localized nombre of this tipo. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	*/
	@Override
	public java.lang.String getNombre(java.util.Locale locale,
		boolean useDefault) {
		return _tipo.getNombre(locale, useDefault);
	}

	/**
	* Returns the localized nombre of this tipo in the language. Uses the default language if no localization exists for the requested language.
	*
	* @param languageId the ID of the language
	* @return the localized nombre of this tipo
	*/
	@Override
	public java.lang.String getNombre(java.lang.String languageId) {
		return _tipo.getNombre(languageId);
	}

	/**
	* Returns the localized nombre of this tipo in the language, optionally using the default language if no localization exists for the requested language.
	*
	* @param languageId the ID of the language
	* @param useDefault whether to use the default language if no localization exists for the requested language
	* @return the localized nombre of this tipo
	*/
	@Override
	public java.lang.String getNombre(java.lang.String languageId,
		boolean useDefault) {
		return _tipo.getNombre(languageId, useDefault);
	}

	@Override
	public java.lang.String getNombreCurrentLanguageId() {
		return _tipo.getNombreCurrentLanguageId();
	}

	@Override
	public java.lang.String getNombreCurrentValue() {
		return _tipo.getNombreCurrentValue();
	}

	/**
	* Returns a map of the locales and localized nombres of this tipo.
	*
	* @return the locales and localized nombres of this tipo
	*/
	@Override
	public java.util.Map<java.util.Locale, java.lang.String> getNombreMap() {
		return _tipo.getNombreMap();
	}

	/**
	* Sets the nombre of this tipo.
	*
	* @param nombre the nombre of this tipo
	*/
	@Override
	public void setNombre(java.lang.String nombre) {
		_tipo.setNombre(nombre);
	}

	/**
	* Sets the localized nombre of this tipo in the language.
	*
	* @param nombre the localized nombre of this tipo
	* @param locale the locale of the language
	*/
	@Override
	public void setNombre(java.lang.String nombre, java.util.Locale locale) {
		_tipo.setNombre(nombre, locale);
	}

	/**
	* Sets the localized nombre of this tipo in the language, and sets the default locale.
	*
	* @param nombre the localized nombre of this tipo
	* @param locale the locale of the language
	* @param defaultLocale the default locale
	*/
	@Override
	public void setNombre(java.lang.String nombre, java.util.Locale locale,
		java.util.Locale defaultLocale) {
		_tipo.setNombre(nombre, locale, defaultLocale);
	}

	@Override
	public void setNombreCurrentLanguageId(java.lang.String languageId) {
		_tipo.setNombreCurrentLanguageId(languageId);
	}

	/**
	* Sets the localized nombres of this tipo from the map of locales and localized nombres.
	*
	* @param nombreMap the locales and localized nombres of this tipo
	*/
	@Override
	public void setNombreMap(
		java.util.Map<java.util.Locale, java.lang.String> nombreMap) {
		_tipo.setNombreMap(nombreMap);
	}

	/**
	* Sets the localized nombres of this tipo from the map of locales and localized nombres, and sets the default locale.
	*
	* @param nombreMap the locales and localized nombres of this tipo
	* @param defaultLocale the default locale
	*/
	@Override
	public void setNombreMap(
		java.util.Map<java.util.Locale, java.lang.String> nombreMap,
		java.util.Locale defaultLocale) {
		_tipo.setNombreMap(nombreMap, defaultLocale);
	}

	@Override
	public boolean isNew() {
		return _tipo.isNew();
	}

	@Override
	public void setNew(boolean n) {
		_tipo.setNew(n);
	}

	@Override
	public boolean isCachedModel() {
		return _tipo.isCachedModel();
	}

	@Override
	public void setCachedModel(boolean cachedModel) {
		_tipo.setCachedModel(cachedModel);
	}

	@Override
	public boolean isEscapedModel() {
		return _tipo.isEscapedModel();
	}

	@Override
	public java.io.Serializable getPrimaryKeyObj() {
		return _tipo.getPrimaryKeyObj();
	}

	@Override
	public void setPrimaryKeyObj(java.io.Serializable primaryKeyObj) {
		_tipo.setPrimaryKeyObj(primaryKeyObj);
	}

	@Override
	public com.liferay.portlet.expando.model.ExpandoBridge getExpandoBridge() {
		return _tipo.getExpandoBridge();
	}

	@Override
	public void setExpandoBridgeAttributes(
		com.liferay.portal.model.BaseModel<?> baseModel) {
		_tipo.setExpandoBridgeAttributes(baseModel);
	}

	@Override
	public void setExpandoBridgeAttributes(
		com.liferay.portlet.expando.model.ExpandoBridge expandoBridge) {
		_tipo.setExpandoBridgeAttributes(expandoBridge);
	}

	@Override
	public void setExpandoBridgeAttributes(
		com.liferay.portal.service.ServiceContext serviceContext) {
		_tipo.setExpandoBridgeAttributes(serviceContext);
	}

	@Override
	public java.lang.String[] getAvailableLanguageIds() {
		return _tipo.getAvailableLanguageIds();
	}

	@Override
	public java.lang.String getDefaultLanguageId() {
		return _tipo.getDefaultLanguageId();
	}

	@Override
	public void prepareLocalizedFieldsForImport()
		throws com.liferay.portal.LocaleException {
		_tipo.prepareLocalizedFieldsForImport();
	}

	@Override
	public void prepareLocalizedFieldsForImport(
		java.util.Locale defaultImportLocale)
		throws com.liferay.portal.LocaleException {
		_tipo.prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	public java.lang.Object clone() {
		return new TipoWrapper((Tipo)_tipo.clone());
	}

	@Override
	public int compareTo(cat.diba.oficinasvivienda.model.Tipo tipo) {
		return _tipo.compareTo(tipo);
	}

	@Override
	public int hashCode() {
		return _tipo.hashCode();
	}

	@Override
	public com.liferay.portal.model.CacheModel<cat.diba.oficinasvivienda.model.Tipo> toCacheModel() {
		return _tipo.toCacheModel();
	}

	@Override
	public cat.diba.oficinasvivienda.model.Tipo toEscapedModel() {
		return new TipoWrapper(_tipo.toEscapedModel());
	}

	@Override
	public cat.diba.oficinasvivienda.model.Tipo toUnescapedModel() {
		return new TipoWrapper(_tipo.toUnescapedModel());
	}

	@Override
	public java.lang.String toString() {
		return _tipo.toString();
	}

	@Override
	public java.lang.String toXmlString() {
		return _tipo.toXmlString();
	}

	@Override
	public void persist()
		throws com.liferay.portal.kernel.exception.SystemException {
		_tipo.persist();
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TipoWrapper)) {
			return false;
		}

		TipoWrapper tipoWrapper = (TipoWrapper)obj;

		if (Validator.equals(_tipo, tipoWrapper._tipo)) {
			return true;
		}

		return false;
	}

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #getWrappedModel}
	 */
	public Tipo getWrappedTipo() {
		return _tipo;
	}

	@Override
	public Tipo getWrappedModel() {
		return _tipo;
	}

	@Override
	public void resetOriginalValues() {
		_tipo.resetOriginalValues();
	}

	private Tipo _tipo;
}